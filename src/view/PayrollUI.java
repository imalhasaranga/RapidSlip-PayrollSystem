/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.imal.practicalJcombSearchable.JCData;
import control.*;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.DB;
import model.Employee;
import model.OftnLogic;
import model.PayRoll;

/**
 *
 * @author Gihan
 */
public final class PayrollUI extends javax.swing.JPanel {

    PayRoll Proll = null;
    CreateExcel createexcel = null;
    Employee employee;
    JCData da;
    Printsitereport printsiterep;

    public PayrollUI() {
        initComponents();
        Proll = new PayRoll();
        OftnLogic.Sites(cmbsite);
        da = new JCData();
        da.setDisplayMember("All Sites");
        da.setValueMember(-1);
        cmbsite.addItem(da);
        cmbsite.setSelectedItem(da);
        LoadTable();
    }

    public void putCheckRemove(boolean b) {

        for (int i = 0; i < salary.getRowCount(); i++) {
            salary.setValueAt(b, i, 1);
        }
    }

    public void LoadTable() {

        try {
            DefaultTableModel df = (DefaultTableModel) salary.getModel();
            df.setRowCount(0);
            ResultSet rs = Proll.getPayroll(ycyear.getYear(), mcmonth.getMonth() + 1, cmbsite.getSelectedDataItemText());
            while (rs.next()) {
                ArrayList ar = new ArrayList<>();
                ar.add(rs.getString("payroll.EmpNumber"));
                ar.add(true);
                ar.add(rs.getString("FMname") + " " + rs.getString("Lname"));
                ar.add(rs.getString("Designation"));
                ar.add(rs.getString("Site_location"));
                ar.add(rs.getString("Besic_salary"));
                ar.add(rs.getString("NpTotalBasic"));
                ar.add(rs.getString("Epf_employee"));
                ar.add(rs.getString("Epf_company"));
                ar.add(rs.getString("etf"));
                ar.add(rs.getString("Balance_basic"));
                ar.add(rs.getString("Total_allowances"));
                ar.add(rs.getString("NpTotalAllowances"));
                ar.add(rs.getString("GrossTotal_addition"));
                ar.add(rs.getString("OT_total"));
                ar.add(rs.getString("PayeEmp"));
                ar.add(rs.getString("Total_deduction"));
                ar.add(rs.getString("AdvanceTaken"));
                ar.add(rs.getString("SalaryShouldget"));
                ar.add(rs.getString("FinalSalary"));
                ar.add(rs.getString("PayrollNum"));

                df.addRow(ar.toArray());
            }


        } catch (Exception e) {
            System.out.println(e);
        }

    }

    void calEpfCompTotal() {
        double totepfcompany = 0.0;
        double totetfcompany = 0.0;

        for (int x = 0; x < salary.getRowCount(); x++) {
            totepfcompany += Double.parseDouble(salary.getValueAt(x, 8).toString());
            totetfcompany += Double.parseDouble(salary.getValueAt(x, 9).toString());

        }

        System.out.println("TOT EPF: " + totepfcompany);
        System.out.println("TOT ETF: " + totetfcompany);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel19 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bdetails = new javax.swing.JButton();
        bprintslips = new javax.swing.JButton();
        bprintslips1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        bchange = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        salary = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        ycyear = new com.toedter.calendar.JYearChooser();
        mcmonth = new com.toedter.calendar.JMonthChooser();
        bview = new javax.swing.JButton();
        cmbsite = new com.imal.practicalJcombSearchable.JComboPractical();

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bgtop_payrollprint.jpg"))); // NOI18N
        jLabel19.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        bdetails.setText("E-Bank File");
        bdetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdetailsActionPerformed(evt);
            }
        });

        bprintslips.setText("Print Slips");
        bprintslips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bprintslipsActionPerformed(evt);
            }
        });

        bprintslips1.setBackground(new java.awt.Color(210, 228, 255));
        bprintslips1.setText("Delete");
        bprintslips1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bprintslips1ActionPerformed(evt);
            }
        });

        jButton1.setText("Select All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Select Non");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PaySheet (Site)", "PaySheet (Designation)", "Site Reports ", "EPF Contribution Report", "PAYE Report", "ETF Report", "Gross Salary Report", "Stamp Duty Report" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        bchange.setBackground(new java.awt.Color(210, 228, 255));
        bchange.setText("Change Pay Type");
        bchange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bchangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bdetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bprintslips, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bprintslips1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bchange, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bdetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bprintslips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bprintslips1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        salary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmpNo", "Select", "Full Name", "Designation", "Site", "B.Salary", "NopaySalary", "EPF.Emp", "EPF.Comp", "ETF", "Bal. Basic", "Allo.Total", "Allo.Nopay", "Addition.Totl", "OTValue", "PAYE", "Diduction.Totl", "Advance", "Salary", "Av.Salary", "PayRollID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salary.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        salary.setAutoscrolls(false);
        salary.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(salary);
        salary.getColumnModel().getColumn(0).setPreferredWidth(80);
        salary.getColumnModel().getColumn(1).setMinWidth(90);
        salary.getColumnModel().getColumn(1).setPreferredWidth(90);
        salary.getColumnModel().getColumn(1).setMaxWidth(90);
        salary.getColumnModel().getColumn(2).setPreferredWidth(300);
        salary.getColumnModel().getColumn(3).setPreferredWidth(200);
        salary.getColumnModel().getColumn(4).setPreferredWidth(200);
        salary.getColumnModel().getColumn(5).setPreferredWidth(100);
        salary.getColumnModel().getColumn(6).setPreferredWidth(100);
        salary.getColumnModel().getColumn(7).setPreferredWidth(100);
        salary.getColumnModel().getColumn(8).setPreferredWidth(100);
        salary.getColumnModel().getColumn(9).setPreferredWidth(100);
        salary.getColumnModel().getColumn(10).setPreferredWidth(100);
        salary.getColumnModel().getColumn(11).setPreferredWidth(100);
        salary.getColumnModel().getColumn(12).setPreferredWidth(100);
        salary.getColumnModel().getColumn(13).setPreferredWidth(100);
        salary.getColumnModel().getColumn(14).setPreferredWidth(100);
        salary.getColumnModel().getColumn(15).setPreferredWidth(100);
        salary.getColumnModel().getColumn(16).setPreferredWidth(100);
        salary.getColumnModel().getColumn(17).setPreferredWidth(100);
        salary.getColumnModel().getColumn(18).setPreferredWidth(100);
        salary.getColumnModel().getColumn(19).setPreferredWidth(100);
        salary.getColumnModel().getColumn(20).setMinWidth(0);
        salary.getColumnModel().getColumn(20).setPreferredWidth(0);
        salary.getColumnModel().getColumn(20).setMaxWidth(0);

        jPanel5.setBackground(new java.awt.Color(237, 237, 237));
        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 102)));

        mcmonth.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        bview.setText("View");
        bview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ycyear, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mcmonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbsite, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bview)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ycyear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mcmonth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bview, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addComponent(cmbsite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bview, cmbsite});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bdetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdetailsActionPerformed
//        try {
//            ResultSet rs = Proll.getPayrolForTEMPDAT(ycyear.getYear(), mcmonth.getMonth() + 1);
//            while (rs.next()) {
//                if(rs.getString("account_number").equals("") || rs.getString("bankcode").equals("") || rs.getString("branchcode").equals("")){
//                    
//                }
//                
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Error From Get Payroll Data! " + e, "Warning!", 0);
//        }
        new EbankingDetails(ycyear.getYear(), mcmonth.getMonth() + 1, Proll.getPayrolForTEMPDAT(ycyear.getYear(), mcmonth.getMonth() + 1)).setVisible(true);

    }//GEN-LAST:event_bdetailsActionPerformed

    private void bprintslipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bprintslipsActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "Are Sure you want to Print These Records", "RECORD PRINTING", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {

            Proll.printRecords(salary, ycyear.getYear(), mcmonth.getMonth() + 1);
        }
    }//GEN-LAST:event_bprintslipsActionPerformed

    private void bprintslips1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bprintslips1ActionPerformed
        if (salary.getSelectedRow() != -1) {
            int i = JOptionPane.showConfirmDialog(null, "Are Sure you want to Remove this Record", "RECORD DELETION", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {
                Proll.deActivateReocrd(Integer.parseInt(salary.getValueAt(salary.getSelectedRow(), 20).toString()));
                LoadTable();
            }
        }
    }//GEN-LAST:event_bprintslips1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        putCheckRemove(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        putCheckRemove(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bviewActionPerformed
        LoadTable();
        calEpfCompTotal();
    }//GEN-LAST:event_bviewActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem().toString().trim().equals("PaySheet (Site)")) {
            optionSelector optionSelector = new optionSelector(this);
            optionSelector.setVisible(true);
        } else if (jComboBox1.getSelectedItem().toString().trim().equals("Site Reports")) {
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print site Balance Report", "Site-Full Report", JOptionPane.YES_NO_OPTION);

            if (i == 0) {
                printsiterep = new Printsitereport();
                Proll = new PayRoll();

                double totalamt = 0.0;
                int totrecords = 0;
                String paytype = "";



                for (int x = 0; x < salary.getRowCount(); x++) {
                    totalamt += Double.parseDouble(salary.getValueAt(x, 19).toString());
                    totrecords++;

//                    try {
//                        ResultSet rs = Proll.getPayrollByEmp(Integer.parseInt(salary.getValueAt(x, 0).toString()), ycyear.getYear(), mcmonth.getMonth() + 1);
//                        while (rs.next()) {
//                            System.out.println("VAL: " + rs.getString("finalsalary"));
//                            System.out.println("VAL: " + rs.getString("paytype"));
//                        }
//                    } catch (Exception e) {
//                        System.out.println("ERROR: " + e);
//                        e.printStackTrace();
//                    }
                }

                printsiterep.setYear(ycyear.getYear());
                printsiterep.setMonth(mcmonth.getMonth() + 1);
                printsiterep.setSitename(cmbsite.getSelectedDataItemText());
                printsiterep.setTotrecords(totrecords);
                //printsiterep.setTotamount(totalamt);
                printsiterep.printThisInvoice(salary);


            }

//            try {
//                ResultSet rs = Proll.getPayroll(ycyear.getYear(), mcmonth.getMonth() + 1, cmbsite.getSelectedDataItemText());
//                
//            } catch (Exception e) {
//                System.out.println("Error: " + e);
//                e.printStackTrace();
//            }




            //            if (salary.getRowCount() > 0) {
            //                employee = new Employee();
            //
            //
            //                for (int x = 0; x < salary.getRowCount(); x++) {
            //                    totalamt += Double.parseDouble(salary.getValueAt(x, 19).toString());
            //                }
            //
            //                createexcel = new CreateExcel();
            //                createexcel.setSite(cmbsite.getSelectedDataItemText());
            //                createexcel.setYear(ycyear.getYear());
            //                createexcel.setMonth(mcmonth.getMonth() + 1);
            //                createexcel.setSitetotal(totalamt);
            //
            //                createexcel.createSiteSalaryFile(salary);
            //
            //            } else {
            //                JOptionPane.showMessageDialog(null, "No Values on Table to Generate Excel Sheet", "Warning!", 2);
            //            }

        } else if (jComboBox1.getSelectedItem().toString().trim().equals("EPF Contribution Report")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print EPF report", "Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        EPFReport rp = new EPFReport();
                        rp.printThisInvoice(salary, mcmonth.getMonth() + 1, ycyear.getYear());
                    }
                });
                t.start();
            }
        } else if (jComboBox1.getSelectedItem().toString().trim().equals("PAYE Report")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print PAYE report", "Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        PAYEreport rp = new PAYEreport();
                        rp.printThisInvoice(salary, mcmonth.getMonth() + 1, ycyear.getYear());
                    }
                });
                t.start();
            }
        } else if (jComboBox1.getSelectedItem().toString().trim().equals("ETF Report")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print ETF report", "Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        ETFreport rp = new ETFreport();
                        rp.printThisInvoice(salary, mcmonth.getMonth() + 1, ycyear.getYear());
                    }
                });
                t.start();
            }
        } else if (jComboBox1.getSelectedItem().toString().trim().equals("Stamp Duty Report")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print Stamp Duty Deduction report", "Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        StampDutyDidReport rp = new StampDutyDidReport();
                        rp.printThisDetails(salary, mcmonth.getMonth() + 1, ycyear.getYear());
                    }
                });
                t.start();
            }
        } else if (jComboBox1.getSelectedItem().toString().trim().equals("PaySheet (Designation)")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            new DesignationSelection(salary, ycyear.getYear(), mcmonth.getMonth() + 1).setVisible(true);

        } else if (jComboBox1.getSelectedItem().toString().trim().equals("Gross Salary Report")) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print Gross Salary report", "Gross-Salary Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        new GrossSalaryReport(salary, mcmonth.getMonth() + 1, ycyear.getYear()).printThisInvoice();
                    }
                });
                t.start();
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void bchangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bchangeActionPerformed
        (new changePaytype(ycyear.getYear(), mcmonth.getMonth() + 1, cmbsite.getSelectedDataItemText())).setVisible(true);
    }//GEN-LAST:event_bchangeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bchange;
    private javax.swing.JButton bdetails;
    private javax.swing.JButton bprintslips;
    private javax.swing.JButton bprintslips1;
    private javax.swing.JButton bview;
    private com.imal.practicalJcombSearchable.JComboPractical cmbsite;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JMonthChooser mcmonth;
    private javax.swing.JTable salary;
    private com.toedter.calendar.JYearChooser ycyear;
    // End of variables declaration//GEN-END:variables

    public void printSitevice(int option,final String value) {

        if (option == 0) {
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print site full report", "Site-Full Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        new SitewiseCompleteReport(salary, mcmonth.getMonth() + 1, ycyear.getYear()).printThisInvoice();
                    }
                });
                t.start();
            }
        } else if (option == 1) {
            
            cmbsite.setSelectedItem(da);
            bviewActionPerformed(null);
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to print selected Site report", "Site-Full Report", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        new SitewiseCompleteReporOneSite(salary, mcmonth.getMonth() + 1, ycyear.getYear(),value).printThisInvoice();
                    }
                });
                t.start();
            }
            
        }



    }
}
